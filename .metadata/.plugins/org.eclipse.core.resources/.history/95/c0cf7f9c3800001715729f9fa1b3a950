import java.util.PriorityQueue;
import java.util.Random;

public class Tester {
	public static int n = 666;

	public static void main(String[] args) {
		long startTime, endTime;
		PQasSortedArray<Double> pq1 = new PQasSortedArray<>(n);
		PriorityQueue<Double> pq2 = new PriorityQueue<>(n);
		PriorityQueue<Double> pqHeap = new PriorityQueue<>(n);
		Random r = new Random();
		double[] arr1 = new double[n];
		double[] arr2 = new double[n];
		double[] arrHeap = new double[n];
		for (int i = 0; i < n; i++) {
			arr1[i] = r.nextDouble();
			arr2[i] = arr1[i];
			arrHeap[i] = arr1[i];
		}

		startTime = System.nanoTime();
		for (int i = 0; i < arr1.length; i++)
			pq1.insert(arr1[i]);
		for (int i = arr1.length - 1; i >= 0; i--)
			arr1[i] = pq1.deleteMin();
		endTime = System.nanoTime();
		System.out.println("Took " + ((endTime - startTime) / 1000000) + " time units");

		startTime = System.nanoTime();
		for (int i = 0; i < arr1.length; i++)
			pq2.offer(arr1[i]); // "offer()" is insert()
		for (int i = arr1.length - 1; i >= 0; i--)
			arr1[i] = pq2.poll(); // "poll()" is deleteMin()
		endTime = System.nanoTime();
		System.out.println("Took " + ((endTime - startTime) / 1000000) + " time units");

	}

	public static void heapSort(double[] arr) {
		size = arr.length;
		heap = (AnyType[]) new Comparable[size + 1];
		System.arraycopy(array, 0, heap, 1, size);
		buildHeap();

		for (int i = size; i > 0; i--) {
			AnyType tmp = heap[i]; // move top item to the end of the heap array
			heap[i] = heap[1];
			heap[1] = tmp;
			size--;
			percolatingDown(1);
		}
		for (int k = 0; k < heap.length - 1; k++) {
			array[k] = heap[heap.length - 1 - k];
		}
	}

}
