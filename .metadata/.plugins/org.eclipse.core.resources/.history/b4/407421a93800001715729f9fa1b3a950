import java.util.PriorityQueue;
import java.util.Random;

public class Tester {
	public static int n = 666;

	public static void main(String[] args) {
		long startTime, endTime;
		PQasSortedArray<Double> pq1 = new PQasSortedArray<>(n);
		PriorityQueue<Double> pq2 = new PriorityQueue<>(n);
		PriorityQueue<Double> pqHeap = new PriorityQueue<>(n);
		Random r = new Random();
		double[] arr1 = new double[n];
		double[] arr2 = new double[n];
		double[] arrHeap = new double[n];
		for (int i = 0; i < n; i++) {
			arr1[i] = r.nextDouble();
			arr2[i] = arr1[i];
			arrHeap[i] = arr1[i];
		}

		startTime = System.nanoTime();
		for (int i = 0; i < arr1.length; i++)
			pq1.insert(arr1[i]);
		for (int i = arr1.length - 1; i >= 0; i--)
			arr1[i] = pq1.deleteMin();
		endTime = System.nanoTime();
		System.out.println("Took " + ((endTime - startTime) / 1000000) + " time units");

		startTime = System.nanoTime();
		for (int i = 0; i < arr1.length; i++)
			pq2.offer(arr1[i]); // "offer()" is insert()
		for (int i = arr1.length - 1; i >= 0; i--)
			arr1[i] = pq2.poll(); // "poll()" is deleteMin()
		endTime = System.nanoTime();
		System.out.println("Took " + ((endTime - startTime) / 1000000) + " time units");

	}

	public static void heapSort(double[] arr) {
		
		heapify(arr);        
        for (int i = N; i > 0; i--)
        {
            swap(arr,0, i);
            N = N-1;
            maxheap(arr, 0);
        }
	}
	
	private static void heapify(int arr[])
    {
        N = arr.length-1;
        for (int i = N/2; i >= 0; i--)
            maxheap(arr, i);        
    }
    /* Function to swap largest element in heap */        
    private static void maxheap(int arr[], int i)
    { 
        int left = 2*i ;
        int right = 2*i + 1;
        int max = i;
        if (left <= N && arr[left] > arr[i])
            max = left;
        if (right <= N && arr[right] > arr[max])        
            max = right;
 
        if (max != i)
        {
            swap(arr, i, max);
            maxheap(arr, max);
        }
    } 

}
